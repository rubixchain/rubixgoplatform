// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "murali.c@ensurity.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/add-peer-details": {
            "post": {
                "description": "This API allows the user to add peer details manually",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Add Peer",
                "parameters": [
                    {
                        "description": "Peer Details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DIDPeerMapTemp"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/check-pinned-state": {
            "delete": {
                "description": "This API is used to check if the token state for which the token is pledged is exhausted or not.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Check for exhausted token state hash",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token State Hash",
                        "name": "tokenstatehash",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/commit-data-token": {
            "post": {
                "description": "This API will create data token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data Tokens"
                ],
                "summary": "Create Data Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Batch ID",
                        "name": "batchID",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/create-data-token": {
            "post": {
                "description": "This API will create data token",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "multipart/form-data"
                ],
                "tags": [
                    "Data Tokens"
                ],
                "summary": "Create Data Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User/Entity ID",
                        "name": "UserID",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "User/Entity Info",
                        "name": "UserInfo",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Committer DID",
                        "name": "CommitterDID",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Batch ID",
                        "name": "BacthID",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "File Info is json string {",
                        "name": "FileInfo",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "File to be committed",
                        "name": "FileContent",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/create-ft": {
            "post": {
                "description": "This API endpoint will create FTs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FT"
                ],
                "summary": "Create FT",
                "parameters": [
                    {
                        "description": "Create FT",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.CreateFTReqSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/create-nft": {
            "post": {
                "description": "This API will create new NFT",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "multipart/form-data"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Create NFT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DID",
                        "name": "did",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "JSON file which contains information about the NFT",
                        "name": "metadata",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "File which is meant to be an NFT",
                        "name": "artifact",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/deploy-nft": {
            "post": {
                "description": "This API will deploy the NFT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Deploy NFT",
                "operationId": "deploy-nft",
                "parameters": [
                    {
                        "description": "Deploy nft",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DeployNFTSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/deploy-smart-contract": {
            "post": {
                "description": "This API will deploy smart contract Token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Smart Contract"
                ],
                "summary": "Deploy Smart Contract",
                "operationId": "deploy-smart-contract",
                "parameters": [
                    {
                        "description": "Deploy smart contract",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.DeploySmartContractSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/execute-nft": {
            "post": {
                "description": "This API will add a new block which indicates either transfer of ownership of NFT or internal state change through self-execution",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Execution of NFT",
                "parameters": [
                    {
                        "description": "Transfer the ownership of particular NFT or self-execution with some data if 'receiver' is empty ",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ExecuteNFTSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/execute-smart-contract": {
            "post": {
                "description": "This API will Execute smart contract Token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Smart Contract"
                ],
                "summary": "Execute Smart Contract",
                "parameters": [
                    {
                        "description": "Execute smart contrct and add details to chain",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.ExecuteSmartContractSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/fetch-nft": {
            "get": {
                "description": "This API will Fetch NFT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Fetch NFT",
                "operationId": "fetch-nft",
                "parameters": [
                    {
                        "type": "string",
                        "name": "nft",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/fetch-smart-contract": {
            "get": {
                "description": "This API will Fetch smart contract",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Smart Contract"
                ],
                "summary": "Fetch Smart Contract",
                "operationId": "fetch-smart-contract",
                "parameters": [
                    {
                        "type": "string",
                        "name": "smartContractToken",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/generate-smart-contract": {
            "post": {
                "description": "This API will Generate smart contract Token",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "multipart/form-data"
                ],
                "tags": [
                    "Smart Contract"
                ],
                "summary": "Generate Smart Contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DID",
                        "name": "did",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "location of binary code hash",
                        "name": "binaryCodePath",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "location of raw code hash",
                        "name": "rawCodePath",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "location of schema code hash",
                        "name": "schemaFilePath",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/get-account-info": {
            "get": {
                "description": "For a mentioned DID, check the account balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Check account balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User DID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/get-by-comment": {
            "get": {
                "description": "Retrieves the details of a transaction based on its comment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get transaction details by Transcation Comment",
                "operationId": "get-by-comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment to identify the transaction",
                        "name": "Comment",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/get-by-did": {
            "get": {
                "description": "Retrieves the details of a transaction based on dID and date range.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get transaction details by dID",
                "operationId": "get-by-did",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DID of sender/receiver",
                        "name": "DID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by role as sender or receiver",
                        "name": "Role",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Start date of the date range (format: YYYY-MM-DD",
                        "name": "StartDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End date of the date range (format: YYYY-MM-DD)",
                        "name": "EndDate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/get-by-node": {
            "get": {
                "description": "Get count of incoming and outgoing txns of the DID ins a node.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get count of incoming and outgoing txns of the DID ins a node",
                "operationId": "get-txn-details-by-node",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.TxnCountForDID"
                        }
                    }
                }
            }
        },
        "/api/get-by-txnId": {
            "get": {
                "description": "Retrieves the details of a transaction based on its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get transaction details by Transcation ID",
                "operationId": "get-txn-details-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the transaction to retrieve",
                        "name": "txnID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/get-data-token": {
            "get": {
                "description": "This API will get all data token belong to the did",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Data Tokens"
                ],
                "summary": "Get Data Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "DID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/get-ft-info-by-did": {
            "get": {
                "description": "This API endpoint retrieves the names and count of FTs of a given DID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FT"
                ],
                "summary": "Get FT balance information for a given DID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User DID",
                        "name": "did",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.GetFTInfo"
                        }
                    }
                }
            }
        },
        "/api/get-ft-token-chain": {
            "get": {
                "description": "This API returns FT token chain data for a given FT token ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FT"
                ],
                "summary": "Get FT Token Chain Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "FT Token ID",
                        "name": "tokenID",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with token chain data",
                        "schema": {
                            "$ref": "#/definitions/model.GetFTTokenChainReply"
                        }
                    }
                }
            }
        },
        "/api/get-nft-token-chain-data": {
            "get": {
                "description": "This API will return nft token chain data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get NFT Token Chain Data",
                "operationId": "get-nft-token-chain-data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NFT token id",
                        "name": "nft",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Set to true if you only need the latest token block",
                        "name": "latest",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/get-nfts-by-did": {
            "get": {
                "description": "This API will get all NFTs owned by the particular did",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get NFTs owned by the particular did",
                "parameters": [
                    {
                        "type": "string",
                        "name": "did",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NFTList"
                        }
                    }
                }
            }
        },
        "/api/get-pledgedtoken-details": {
            "get": {
                "description": "This API allows the user to get details about the tokens the quorums have pledged i.e. which token is pledged for which token state",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get details about the pledged tokens",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.TokenStateResponse"
                        }
                    }
                }
            }
        },
        "/api/get-smart-contract-token-chain-data": {
            "post": {
                "description": "This API will return smart contract token chain data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Smart Contract"
                ],
                "summary": "Get Smart Contract Token Chain Data",
                "operationId": "get-smart-contract-token-chain-data",
                "parameters": [
                    {
                        "description": "Returns Smart contract token chain Execution Data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.GetSmartContractTokenChainDataSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/initiate-ft-transfer": {
            "post": {
                "description": "This API endpoint will initiate transfer of FTs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FT"
                ],
                "summary": "Initiate an FT transfer",
                "parameters": [
                    {
                        "description": "Transfer FT",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.TransferFTReqSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/initiate-pin-token": {
            "post": {
                "description": "This API will pin token in the Pinning node on behalf of the sender",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Initiate Pin Token",
                "operationId": "initiate-pin-token",
                "parameters": [
                    {
                        "description": "Intitate Pin Token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.RBTPinRequestSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/initiate-rbt-transfer": {
            "post": {
                "description": "This API will initiate RBT transfer to the specified dID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Initiate RBT Transfer",
                "operationId": "initiate-rbt-transfer",
                "parameters": [
                    {
                        "description": "Intitate RBT transfer",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.RBTTransferRequestSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/initiate-self-transfer": {
            "post": {
                "description": "This API will initiate self RBT transfer for a specific DID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Initiate Self Transfer",
                "operationId": "initiate-self-transfer",
                "parameters": [
                    {
                        "description": "Intitate Self RBT transfer",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.RBTSelfTransferRequestSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/list-nfts": {
            "get": {
                "description": "This API will get all NFTs deployed on the node",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get ALL NFTs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NFTList"
                        }
                    }
                }
            }
        },
        "/api/recover-token": {
            "post": {
                "description": "This API will recover token and tokenchain from the Pinning node to the node which has pinned the token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Recover Token and Tokenchain from the pinning node",
                "operationId": "recover-token",
                "parameters": [
                    {
                        "description": "Recover-Token",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.RBTRecoverRequestSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/register-callback-url": {
            "post": {
                "description": "This API will register call back url for when updated come for smart contract token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Smart Contract"
                ],
                "summary": "Get Smart Contract Token Chain Data",
                "operationId": "register-callback-url",
                "parameters": [
                    {
                        "description": "Register call back URL",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.RegisterCallBackURLSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/run-unpledge": {
            "post": {
                "description": "This API will unpledge all Pledged RBT tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Run Unpledge",
                "operationId": "run-unpledge",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/signature-response": {
            "post": {
                "description": "This API is used to supply the password for the node along with the ID generated when Initiate RBT transfer is called.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Signature Response",
                "operationId": "signature-response",
                "parameters": [
                    {
                        "description": "Send input for requested signature",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.SignatureResponseSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/start": {
            "get": {
                "description": "It will setup the core if not done before",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Basic"
                ],
                "summary": "Start Core",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/subscribe-nft": {
            "post": {
                "description": "This API endpoint allows subscribing to a NFT.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Subscribe to NFT",
                "parameters": [
                    {
                        "description": "Subscribe to input nft",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.NewNFTSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/subscribe-smart-contract": {
            "post": {
                "description": "This API endpoint allows subscribing to a smart contract.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Smart Contract"
                ],
                "summary": "Subscribe to Smart Contract",
                "parameters": [
                    {
                        "description": "Subscribe to input contract",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/server.NewSubscriptionSwaggoInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        },
        "/api/unpledge-pow-unpledge-tokens": {
            "post": {
                "description": "This API will unpledge all PoW based pledge tokens and drop the unpledgequeue table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Unpledge POW Based pledge Tokens",
                "operationId": "unpledge-pow-unpledge-tokens",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BasicResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.BasicResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {},
                "status": {
                    "type": "boolean"
                }
            }
        },
        "model.FTInfo": {
            "type": "object",
            "properties": {
                "creator_did": {
                    "type": "string"
                },
                "ft_count": {
                    "type": "integer"
                },
                "ft_name": {
                    "type": "string"
                }
            }
        },
        "model.GetFTInfo": {
            "type": "object",
            "properties": {
                "ft_info": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FTInfo"
                    }
                },
                "message": {
                    "type": "string"
                },
                "result": {},
                "status": {
                    "type": "boolean"
                }
            }
        },
        "model.GetFTTokenChainReply": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {},
                "status": {
                    "type": "boolean"
                },
                "tokenChainData": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "model.NFTInfo": {
            "type": "object",
            "properties": {
                "nft": {
                    "type": "string"
                },
                "nft_value": {
                    "type": "number"
                },
                "owner_did": {
                    "type": "string"
                }
            }
        },
        "model.NFTList": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "nfts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NFTInfo"
                    }
                },
                "result": {},
                "status": {
                    "type": "boolean"
                }
            }
        },
        "model.PledgedTokenStateDetails": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "token_state": {
                    "type": "string"
                }
            }
        },
        "model.TokenStateResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {},
                "status": {
                    "type": "boolean"
                },
                "token_state_details": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PledgedTokenStateDetails"
                    }
                }
            }
        },
        "model.TransactionCount": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "txnReceived": {
                    "type": "integer"
                },
                "txnSend": {
                    "type": "integer"
                }
            }
        },
        "model.TxnCountForDID": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "result": {},
                "status": {
                    "type": "boolean"
                },
                "txnCount": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.TransactionCount"
                    }
                }
            }
        },
        "server.CreateFTReqSwaggoInput": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "ft_count": {
                    "type": "integer"
                },
                "ft_name": {
                    "type": "string"
                },
                "ft_symbol": {
                    "type": "string"
                },
                "token_count": {
                    "type": "integer"
                }
            }
        },
        "server.DIDPeerMapTemp": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "didtype": {
                    "type": "integer"
                },
                "peerID": {
                    "type": "string"
                }
            }
        },
        "server.DeployNFTSwaggoInput": {
            "type": "object",
            "properties": {
                "did": {
                    "type": "string"
                },
                "nft": {
                    "type": "string"
                },
                "quorum_type": {
                    "type": "integer"
                }
            }
        },
        "server.DeploySmartContractSwaggoInput": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "deployerAddr": {
                    "type": "string"
                },
                "quorumType": {
                    "type": "integer"
                },
                "rbtAmount": {
                    "type": "number"
                },
                "smartContractToken": {
                    "type": "string"
                }
            }
        },
        "server.ExecuteNFTSwaggoInput": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "nft": {
                    "type": "string"
                },
                "nft_data": {
                    "type": "string"
                },
                "nft_value": {
                    "type": "number"
                },
                "owner": {
                    "type": "string"
                },
                "quorum_type": {
                    "type": "integer"
                },
                "receiver": {
                    "type": "string"
                }
            }
        },
        "server.ExecuteSmartContractSwaggoInput": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "executorAddr": {
                    "type": "string"
                },
                "quorumType": {
                    "type": "integer"
                },
                "smartContractData": {
                    "type": "string"
                },
                "smartContractToken": {
                    "type": "string"
                }
            }
        },
        "server.GetSmartContractTokenChainDataSwaggoInput": {
            "type": "object",
            "properties": {
                "latest": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "server.NewNFTSwaggoInput": {
            "type": "object",
            "properties": {
                "nft": {
                    "type": "string"
                }
            }
        },
        "server.NewSubscriptionSwaggoInput": {
            "type": "object",
            "properties": {
                "smartContractToken": {
                    "type": "string"
                }
            }
        },
        "server.RBTPinRequestSwaggoInput": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "pinningNode": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                },
                "tokenCOunt": {
                    "type": "number"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "server.RBTRecoverRequestSwaggoInput": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "pinningNode": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                },
                "tokenCOunt": {
                    "type": "number"
                }
            }
        },
        "server.RBTSelfTransferRequestSwaggoInput": {
            "type": "object",
            "properties": {
                "sender": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "server.RBTTransferRequestSwaggoInput": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "receiver": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                },
                "tokenCOunt": {
                    "type": "number"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "server.RegisterCallBackURLSwaggoInput": {
            "type": "object",
            "properties": {
                "CallBackURL": {
                    "type": "string"
                },
                "SmartContractToken": {
                    "type": "string"
                }
            }
        },
        "server.SignatureResponseSwaggoInput": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "mode": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "server.TransferFTReqSwaggoInput": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "creatorDID": {
                    "type": "string"
                },
                "ft_count": {
                    "type": "integer"
                },
                "ft_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "quorum_type": {
                    "type": "integer"
                },
                "receiver": {
                    "type": "string"
                },
                "sender": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "SessionToken": {
            "type": "apiKey",
            "name": "Session-Token",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.9",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Rubix Core",
	Description:      "Rubix core API to control & manage the node.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
