definitions:
  model.BasicResponse:
    properties:
      message:
        type: string
      result: {}
      status:
        type: boolean
    type: object
  model.FTInfo:
    properties:
      creator_did:
        type: string
      ft_count:
        type: integer
      ft_name:
        type: string
    type: object
  model.GetFTInfo:
    properties:
      ft_info:
        items:
          $ref: '#/definitions/model.FTInfo'
        type: array
      message:
        type: string
      result: {}
      status:
        type: boolean
    type: object
  model.GetFTTokenChainReply:
    properties:
      message:
        type: string
      result: {}
      status:
        type: boolean
      tokenChainData:
        items: {}
        type: array
    type: object
  model.NFTInfo:
    properties:
      nft:
        type: string
      nft_value:
        type: number
      owner_did:
        type: string
    type: object
  model.NFTList:
    properties:
      message:
        type: string
      nfts:
        items:
          $ref: '#/definitions/model.NFTInfo'
        type: array
      result: {}
      status:
        type: boolean
    type: object
  model.PledgedTokenStateDetails:
    properties:
      did:
        type: string
      token:
        type: string
      token_state:
        type: string
    type: object
  model.TokenStateResponse:
    properties:
      message:
        type: string
      result: {}
      status:
        type: boolean
      token_state_details:
        items:
          $ref: '#/definitions/model.PledgedTokenStateDetails'
        type: array
    type: object
  model.TransactionCount:
    properties:
      did:
        type: string
      txnReceived:
        type: integer
      txnSend:
        type: integer
    type: object
  model.TxnCountForDID:
    properties:
      message:
        type: string
      result: {}
      status:
        type: boolean
      txnCount:
        items:
          $ref: '#/definitions/model.TransactionCount'
        type: array
    type: object
  server.CreateFTReqSwaggoInput:
    properties:
      did:
        type: string
      ft_count:
        type: integer
      ft_name:
        type: string
      token_count:
        type: integer
    type: object
  server.DIDPeerMapTemp:
    properties:
      did:
        type: string
      didtype:
        type: integer
      peerID:
        type: string
    type: object
  server.DeployNFTSwaggoInput:
    properties:
      did:
        type: string
      nft:
        type: string
      quorum_type:
        type: integer
    type: object
  server.DeploySmartContractSwaggoInput:
    properties:
      comment:
        type: string
      deployerAddr:
        type: string
      quorumType:
        type: integer
      rbtAmount:
        type: number
      smartContractToken:
        type: string
    type: object
  server.ExecuteNFTSwaggoInput:
    properties:
      comment:
        type: string
      nft:
        type: string
      nft_data:
        type: string
      nft_value:
        type: number
      owner:
        type: string
      quorum_type:
        type: integer
      receiver:
        type: string
    type: object
  server.ExecuteSmartContractSwaggoInput:
    properties:
      comment:
        type: string
      executorAddr:
        type: string
      quorumType:
        type: integer
      smartContractData:
        type: string
      smartContractToken:
        type: string
    type: object
  server.GetSmartContractTokenChainDataSwaggoInput:
    properties:
      latest:
        type: boolean
      token:
        type: string
    type: object
  server.NewNFTSwaggoInput:
    properties:
      nft:
        type: string
    type: object
  server.NewSubscriptionSwaggoInput:
    properties:
      smartContractToken:
        type: string
    type: object
  server.RBTPinRequestSwaggoInput:
    properties:
      comment:
        type: string
      pinningNode:
        type: string
      sender:
        type: string
      tokenCOunt:
        type: number
      type:
        type: integer
    type: object
  server.RBTRecoverRequestSwaggoInput:
    properties:
      password:
        type: string
      pinningNode:
        type: string
      sender:
        type: string
      tokenCOunt:
        type: number
    type: object
  server.RBTSelfTransferRequestSwaggoInput:
    properties:
      sender:
        type: string
      type:
        type: integer
    type: object
  server.RBTTransferRequestSwaggoInput:
    properties:
      comment:
        type: string
      receiver:
        type: string
      sender:
        type: string
      tokenCOunt:
        type: number
      type:
        type: integer
    type: object
  server.RegisterCallBackURLSwaggoInput:
    properties:
      CallBackURL:
        type: string
      SmartContractToken:
        type: string
    type: object
  server.SignatureResponseSwaggoInput:
    properties:
      id:
        type: string
      mode:
        type: integer
      password:
        type: string
    type: object
  server.TransferFTReqSwaggoInput:
    properties:
      comment:
        type: string
      creatorDID:
        type: string
      ft_count:
        type: integer
      ft_name:
        type: string
      password:
        type: string
      quorum_type:
        type: integer
      receiver:
        type: string
      sender:
        type: string
    type: object
info:
  contact:
    email: murali.c@ensurity.com
    name: API Support
  description: Rubix core API to control & manage the node.
  title: Rubix Core
  version: "0.9"
paths:
  /api/add-peer-details:
    post:
      consumes:
      - application/json
      description: This API allows the user to add peer details manually
      parameters:
      - description: Peer Details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.DIDPeerMapTemp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Add Peer
      tags:
      - Account
  /api/check-pinned-state:
    delete:
      consumes:
      - application/json
      description: This API is used to check if the token state for which the token
        is pledged is exhausted or not.
      parameters:
      - description: Token State Hash
        in: query
        name: tokenstatehash
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Check for exhausted token state hash
      tags:
      - Account
  /api/commit-data-token:
    post:
      consumes:
      - application/json
      description: This API will create data token
      parameters:
      - description: DID
        in: query
        name: did
        required: true
        type: string
      - description: Batch ID
        in: query
        name: batchID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Create Data Token
      tags:
      - Data Tokens
  /api/create-data-token:
    post:
      consumes:
      - multipart/form-data
      description: This API will create data token
      parameters:
      - description: User/Entity ID
        in: formData
        name: UserID
        type: string
      - description: User/Entity Info
        in: formData
        name: UserInfo
        type: string
      - description: Committer DID
        in: formData
        name: CommitterDID
        type: string
      - description: Batch ID
        in: formData
        name: BacthID
        type: string
      - description: File Info is json string {
        in: formData
        name: FileInfo
        type: string
      - description: File to be committed
        in: formData
        name: FileContent
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Create Data Token
      tags:
      - Data Tokens
  /api/create-ft:
    post:
      consumes:
      - application/json
      description: This API endpoint will create FTs.
      parameters:
      - description: Create FT
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.CreateFTReqSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Create FT
      tags:
      - FT
  /api/create-nft:
    post:
      consumes:
      - multipart/form-data
      description: This API will create new NFT
      parameters:
      - description: DID
        in: formData
        name: did
        required: true
        type: string
      - description: JSON file which contains information about the NFT
        in: formData
        name: metadata
        required: true
        type: file
      - description: File which is meant to be an NFT
        in: formData
        name: artifact
        required: true
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Create NFT
      tags:
      - NFT
  /api/deploy-nft:
    post:
      consumes:
      - application/json
      description: This API will deploy the NFT
      operationId: deploy-nft
      parameters:
      - description: Deploy nft
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.DeployNFTSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Deploy NFT
      tags:
      - NFT
  /api/deploy-smart-contract:
    post:
      consumes:
      - application/json
      description: This API will deploy smart contract Token
      operationId: deploy-smart-contract
      parameters:
      - description: Deploy smart contract
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.DeploySmartContractSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Deploy Smart Contract
      tags:
      - Smart Contract
  /api/execute-nft:
    post:
      consumes:
      - application/json
      description: This API will add a new block which indicates either transfer of
        ownership of NFT or internal state change through self-execution
      parameters:
      - description: 'Transfer the ownership of particular NFT or self-execution with
          some data if ''receiver'' is empty '
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.ExecuteNFTSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Execution of NFT
      tags:
      - NFT
  /api/execute-smart-contract:
    post:
      consumes:
      - application/json
      description: This API will Execute smart contract Token
      parameters:
      - description: Execute smart contrct and add details to chain
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.ExecuteSmartContractSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Execute Smart Contract
      tags:
      - Smart Contract
  /api/fetch-smart-contract:
    get:
      consumes:
      - application/json
      description: This API will Fetch smart contract
      operationId: fetch-smart-contract
      parameters:
      - in: query
        name: smartContractToken
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Fetch Smart Contract
      tags:
      - Smart Contract
  /api/generate-smart-contract:
    post:
      consumes:
      - multipart/form-data
      description: This API will Generate smart contract Token
      parameters:
      - description: DID
        in: formData
        name: did
        required: true
        type: string
      - description: location of binary code hash
        in: formData
        name: binaryCodePath
        required: true
        type: file
      - description: location of raw code hash
        in: formData
        name: rawCodePath
        required: true
        type: file
      - description: location of schema code hash
        in: formData
        name: schemaFilePath
        required: true
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Generate Smart Contract
      tags:
      - Smart Contract
  /api/get-account-info:
    get:
      consumes:
      - application/json
      description: For a mentioned DID, check the account balance
      parameters:
      - description: User DID
        in: query
        name: did
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Check account balance
      tags:
      - Account
  /api/get-by-comment:
    get:
      consumes:
      - application/json
      description: Retrieves the details of a transaction based on its comment.
      operationId: get-by-comment
      parameters:
      - description: Comment to identify the transaction
        in: query
        name: Comment
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get transaction details by Transcation Comment
      tags:
      - Account
  /api/get-by-did:
    get:
      consumes:
      - application/json
      description: Retrieves the details of a transaction based on dID and date range.
      operationId: get-by-did
      parameters:
      - description: DID of sender/receiver
        in: query
        name: DID
        required: true
        type: string
      - description: Filter by role as sender or receiver
        in: query
        name: Role
        type: string
      - description: 'Start date of the date range (format: YYYY-MM-DD'
        in: query
        name: StartDate
        type: string
      - description: 'End date of the date range (format: YYYY-MM-DD)'
        in: query
        name: EndDate
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get transaction details by dID
      tags:
      - Account
  /api/get-by-node:
    get:
      consumes:
      - application/json
      description: Get count of incoming and outgoing txns of the DID ins a node.
      operationId: get-txn-details-by-node
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TxnCountForDID'
      summary: Get count of incoming and outgoing txns of the DID ins a node
      tags:
      - Account
  /api/get-by-txnId:
    get:
      consumes:
      - application/json
      description: Retrieves the details of a transaction based on its ID.
      operationId: get-txn-details-by-id
      parameters:
      - description: The ID of the transaction to retrieve
        in: query
        name: txnID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get transaction details by Transcation ID
      tags:
      - Account
  /api/get-data-token:
    get:
      consumes:
      - application/json
      description: This API will get all data token belong to the did
      parameters:
      - description: DID
        in: query
        name: did
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get Data Token
      tags:
      - Data Tokens
  /api/get-ft-info-by-did:
    get:
      consumes:
      - application/json
      description: This API endpoint retrieves the names and count of FTs of a given
        DID.
      parameters:
      - description: User DID
        in: query
        name: did
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetFTInfo'
      summary: Get FT balance information for a given DID
      tags:
      - FT
  /api/get-ft-token-chain:
    get:
      consumes:
      - application/json
      description: This API returns FT token chain data for a given FT token ID.
      parameters:
      - description: FT Token ID
        in: query
        name: tokenID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with token chain data
          schema:
            $ref: '#/definitions/model.GetFTTokenChainReply'
      summary: Get FT Token Chain Data
      tags:
      - FT
  /api/get-nft-token-chain-data:
    get:
      consumes:
      - application/json
      description: This API will return nft token chain data
      operationId: get-nft-token-chain-data
      parameters:
      - description: NFT token id
        in: query
        name: nft
        required: true
        type: string
      - description: Set to true if you only need the latest token block
        in: query
        name: latest
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get NFT Token Chain Data
      tags:
      - NFT
  /api/get-pledgedtoken-details:
    get:
      description: This API allows the user to get details about the tokens the quorums
        have pledged i.e. which token is pledged for which token state
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TokenStateResponse'
      summary: Get details about the pledged tokens
      tags:
      - Account
  /api/get-smart-contract-token-chain-data:
    post:
      consumes:
      - application/json
      description: This API will return smart contract token chain data
      operationId: get-smart-contract-token-chain-data
      parameters:
      - description: Returns Smart contract token chain Execution Data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.GetSmartContractTokenChainDataSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get Smart Contract Token Chain Data
      tags:
      - Smart Contract
  /api/initiate-ft-transfer:
    post:
      consumes:
      - application/json
      description: This API endpoint will initiate transfer of FTs.
      parameters:
      - description: Transfer FT
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.TransferFTReqSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Initiate an FT transfer
      tags:
      - FT
  /api/initiate-pin-token:
    post:
      consumes:
      - application/json
      description: This API will pin token in the Pinning node on behalf of the sender
      operationId: initiate-pin-token
      parameters:
      - description: Intitate Pin Token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.RBTPinRequestSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Initiate Pin Token
      tags:
      - Account
  /api/initiate-rbt-transfer:
    post:
      consumes:
      - application/json
      description: This API will initiate RBT transfer to the specified dID
      operationId: initiate-rbt-transfer
      parameters:
      - description: Intitate RBT transfer
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.RBTTransferRequestSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Initiate RBT Transfer
      tags:
      - Account
  /api/initiate-self-transfer:
    post:
      consumes:
      - application/json
      description: This API will initiate self RBT transfer for a specific DID
      operationId: initiate-self-transfer
      parameters:
      - description: Intitate Self RBT transfer
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.RBTSelfTransferRequestSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Initiate Self Transfer
      tags:
      - Account
  /api/list-nfts:
    get:
      consumes:
      - application/json
      description: This API will get all NFTs deployed on the node
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.NFTList'
      summary: Get ALL NFTs
      tags:
      - NFT
  /api/recover-token:
    post:
      consumes:
      - application/json
      description: This API will recover token and tokenchain from the Pinning node
        to the node which has pinned the token
      operationId: recover-token
      parameters:
      - description: Recover-Token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.RBTRecoverRequestSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Recover Token and Tokenchain from the pinning node
      tags:
      - Account
  /api/register-callback-url:
    post:
      consumes:
      - application/json
      description: This API will register call back url for when updated come for
        smart contract token
      operationId: register-callback-url
      parameters:
      - description: Register call back URL
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.RegisterCallBackURLSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Get Smart Contract Token Chain Data
      tags:
      - Smart Contract
  /api/run-unpledge:
    post:
      consumes:
      - application/json
      description: This API will unpledge all Pledged RBT tokens
      operationId: run-unpledge
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Run Unpledge
      tags:
      - Account
  /api/signature-response:
    post:
      consumes:
      - application/json
      description: This API is used to supply the password for the node along with
        the ID generated when Initiate RBT transfer is called.
      operationId: signature-response
      parameters:
      - description: Send input for requested signature
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.SignatureResponseSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Signature Response
      tags:
      - Account
  /api/start:
    get:
      consumes:
      - application/json
      description: It will setup the core if not done before
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Start Core
      tags:
      - Basic
  /api/subscribe-nft:
    post:
      consumes:
      - application/json
      description: This API endpoint allows subscribing to a NFT.
      parameters:
      - description: Subscribe to input nft
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.NewNFTSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Subscribe to NFT
      tags:
      - NFT
  /api/subscribe-smart-contract:
    post:
      consumes:
      - application/json
      description: This API endpoint allows subscribing to a smart contract.
      parameters:
      - description: Subscribe to input contract
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/server.NewSubscriptionSwaggoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Subscribe to Smart Contract
      tags:
      - Smart Contract
  /api/unpledge-pow-unpledge-tokens:
    post:
      consumes:
      - application/json
      description: This API will unpledge all PoW based pledge tokens and drop the
        unpledgequeue table
      operationId: unpledge-pow-unpledge-tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.BasicResponse'
      summary: Unpledge POW Based pledge Tokens
      tags:
      - Account
securityDefinitions:
  SessionToken:
    in: header
    name: Session-Token
    type: apiKey
swagger: "2.0"
